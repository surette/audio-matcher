#!/usr/bin/python
import sys
import os
import math
import shutil
import numpy as np
import wave
import struct
import subprocess
import uuid
from mutagen.mp3 import MP3



# Global Variables

# How many hertz away to be considered a match
# Used by checkSequence
TOLERANCE = 1 

# 60% of fingerprints need to match in order to be considered "MATCH"
PERCENT_RATIO = 0.60

# Name of tmp directory created to handle all temporary files created
TMP_FOLDER = "/tmp/zaFile" + "-" + str(uuid.uuid4().hex) + "/"

# A mapping of unique filepaths to their respective fingerprints
FPATH_DICT = dict()

# Used when we want to set a non-zero exit code but not exit immediately
EXIT_CODE = 0



# Represents an audio structure that contains info about each audio file
# Handles converting audio input into our canonical format
class Audio:
    def __init__(self, fpath):
        # full, original filepath to the audio file
        self.fpath = fpath 
        # wav opened version of audio file in canonical form
        self.wavData = self.createCanonicalForm() 

    # Obtains file from class variable fpath
    # Performs checks and mono conversions on audio file, 
    # Returns opened audio file in canonical form:
    # Monaural 16-bit Wav File Sample Rate 22,050 Hz
    def createCanonicalForm(self):

        # extract the name of the file
        name = self.fpath.rpartition('/')[2].split('.')[0] + "-" + \
        str(uuid.uuid4().hex)
        
        path = self.fpath;

        # if a file is an mp3 but does not have a .mp3 extension,
        # create a file in the tmp directory that takes the input file and
        # changes its extension to .mp3
        if isMp3(path) and path.rsplit('.')[1] != 'mp3':
            path = self.toExtension(name, '.mp3')
        
        # same process, but for wav files without .wav extension
        if isWav(path) and path.rsplit('.')[1] != 'wav':
            path = self.toExtension(name, '.wav')

        # check for empty audio files and handle them
        if isWav(path):
            if self.emptyWav(path):
                wav_fpath = path
            else:
                wav_fpath = self.convertToMonoWav(path, name)
        elif isMp3(path):
            if self.emptyMp3(path):
                wav_fpath = self.convertToWav(path, name)
            else:
                wav_fpath = self.convertToMonoWav(path, name) 

        wav_file = self.open_wav_file(wav_fpath)

        return wav_file

    # Create a file in the tmp directory that takes the input file and
    # changes its extension to the extension given
    def toExtension(self, name, ext):
        newPath = TMP_FOLDER + name + ext
        cmd = "cp " + self.fpath + " " + newPath

        subprocess.call(cmd, shell=True)

        return newPath
    
    # determines if given wav file is empty
    def emptyWav(self, path):
        wav_file = self.open_wav_file(path)
        
        return wav_file.getnframes() == 0

    # determines if given mp3 file is empty
    def emptyMp3(self, path):
        mp3_file = MP3(path)

        return mp3_file.info.length <= 0.052125

    # Converts an audio file to a mono wav file using lame
    # RETURNS: the mono wav file's path
    def convertToMonoWav(self, fpath, name):

        #convert mp3 to mono mp3
        mono = TMP_FOLDER + name + "_mono.mp3"
        cmd = "/course/cs4500f13/bin/lame -a --silent -q2 -b 16 " + \
        "--resample 22050 " + fpath + " " + mono
        
        subprocess.call(cmd, shell=True)

        return self.convertToWav(mono, name)

    # converts an audio mp3 to wav file using lame
    def convertToWav(self, fpath, name):

        # convert to wav
        newPath = TMP_FOLDER + name + '.wav'
        cmd = "/course/cs4500f13/bin/lame --decode --silent -q2 " \
        + fpath + " " + newPath

        subprocess.call(cmd, shell=True)

        return newPath

    # opens wav file using wave audio library
    # returns opened wav file
    # Prints error to stderr if it wasn't able to open it
    def open_wav_file(self, fpath):
        try:
            wav_file = wave.open(fpath, 'r')
            return wav_file
        except wave.Error:
            fancyExit("File is not using a correct audio format", 3)
        except:
            fancyExit("Error opening file ", 4)

# Represents a fingerprint structure that contains audio fingerprint
# Creates and stores identifying vector for input audio
class Fingerprint:
    def __init__(self, fpath, wavData):
        # full, original file path of audio file
        self.fpath = fpath
        # attributes of the audio file
        (self.nchannels, self.sampwidth, self.framerate, self.nframes,
        self.comptype, self.compname) = wavData.getparams()
        # list of tuples for the significant frequencies
        self.fingerprint = self.processFingerprint(wavData)

    # Creates fingerprint from wav data
    def processFingerprint(self, wavData):

        fft = self.fftconvert(wavData)

        return self.createFingerprints(fft)

    # Runs the fft on smaller chunks of the input audio
    # Returns a list of frequencies and their associated magnitudes
    def fftconvert(self, audio):

        # the result array of fft for each tenth of a second
        ffta = []
        chunksize = self.framerate/10

        # LOOP INVARIANT:
        # 0 <= i <= nframes/framerate
        # ffta is the combination of the magnitudes 
        # and frequencies of each chunk
        for i in range(0, self.nframes/chunksize):
            wavData = audio.readframes(chunksize)
            unPack = wave.struct.unpack_from(getFormat(chunksize, self.sampwidth), \
            wavData)

            mags = abs(np.fft.fft(unPack))
            freqs = abs(np.fft.fftfreq(chunksize)*chunksize)
            ffta.append(zip(mags, freqs))

        return ffta

    # return an array of tuples consisting of the significant values at each
    # chunk in the file
    def createFingerprints(self, fft):
        fingerprint = []

        # tup is a tuple of the highest values at each section
        for sec in fft:
            tup = self.significantValues(sec)
            fingerprint.append(tup)

        return fingerprint

    # takes a chunk and returns a tuple of highest value 
    # within each of 4 buckets
    # Returns: [#,#,#,#]
    def significantValues(self, sec):
        # bucket1: 0, 4000
        # bucket2: 4000, 8000
        # bucket3: 8000, 12000
        # bucket4: 12000, 15000
        bound0 = 0
        bound1 = 4000
        bound2 = 8000
        bound3 = 12000
        bound4 = 15000
        
        # keeps track of highest frequency associated with highest magnitude
        max_bucket1, max_bucket2, max_bucket3, max_bucket4 = \
        0, 0, 0, 0
        # keeps track of highest magnitude
        max_mag_bucket1, max_mag_bucket2, max_mag_bucket3, max_mag_bucket4 = \
        0, 0, 0, 0

        # loop through the chunk, determining the magnitude is a max in
        # any of the buckets
        for mag, freq in sec:
            if bound0 <= freq < bound1:
                if mag > max_mag_bucket1:
                    max_mag_bucket1 = mag
                    max_bucket1 = freq
            elif bound1 <= freq < bound2:
                if mag > max_mag_bucket2:
                    max_mag_bucket2 = mag
                    max_bucket2 = freq
            elif bound2 <= freq < bound3:
                if mag > max_mag_bucket3:
                    max_mag_bucket3 = mag
                    max_bucket3 = freq
            elif bound3 <= freq <= bound4:
                if mag > max_mag_bucket4:
                    max_mag_bucket4 = mag
                    max_bucket4 = freq

        return max_bucket1, max_bucket2, max_bucket3, max_bucket4

# Check all matches between list1 and list2
def allMatch(list1, list2):

    for path1 in list1:
        for path2 in list2:
            if isSupportedFileType(path1) and isSupportedFileType(path2):
                masterMatcher(path1, path2)
            else:
                printError("Not a Supported File Type", 10)

# If the files are supported, we check whether they match or not,
# if they match, we print "MATCH" along with the shorter file
# followed by the longer file. Otherwise, it prints "NO MATCH"
def masterMatcher(path1, path2):
    name1 = path1.rpartition('/')[2]
    name2 = path2.rpartition('/')[2]

    if match(path1, path2):
        if len(FPATH_DICT[path1].fingerprint) < \
           len(FPATH_DICT[path2].fingerprint):
            print "MATCH " + name1 + " " + name2
        else:
            print "MATCH " + name2 + " " + name1
    else:
       print "NO MATCH"
 
# Checks to see if the two wav files are a match
def match(fpath1, fpath2):

    # makes sure the files exist
    verifyPathToFile(fpath1)
    verifyPathToFile(fpath2)

    fingerprint1 = getFingerprint(fpath1)
    fingerprint2 = getFingerprint(fpath2)

    # returns the result of comparing the two fingerprints
    return compare(fingerprint1.fingerprint, fingerprint2.fingerprint)

# If the file path is not in the dictionary, create it and add it,
# then return the fingerprint of the file path.
def getFingerprint(fpath):
    
    # MEMOIZATION
    # Checks if filepath exists in the cache
    # If it doesn't, it computes it, then stores in dictionary
    # Otherwise, obtain it from dictionary
    if fpath not in FPATH_DICT:
        audio = Audio(fpath)
        fingerprint = Fingerprint(fpath, audio.wavData)
        FPATH_DICT[fpath] = fingerprint
    
    return FPATH_DICT[fpath]

# Checks if file at given filepath is supported
def isSupportedFileType(fpath):

    return isWav(fpath) or isMp3(fpath)

# Checks if file at given filepath is a wav file
def isWav(fpath):

    cmd = "file " + fpath
    output = subprocess.Popen([cmd], stdout = subprocess.PIPE, \
    stderr = subprocess.STDOUT, shell=True).communicate()[0]
    
    return "WAVE" in output

# Checks if file at given filepath is an mp3 file
def isMp3(fpath):

    cmd = "file " + fpath
    output = subprocess.Popen([cmd], stdout = subprocess.PIPE, stderr = \
    subprocess.STDOUT, shell=True).communicate()[0]
    
    return ("MPEG ADTS, layer III" in output) or ("MP3" in output)

# Verifies arguments are correct format
def verifyArgs():

    if len(sys.argv) != 5:
        fancyExit("Wrong number of arguments", 1)

    # Verify that all the flags are correct
    if ((sys.argv[1] != '-f' and sys.argv[1] != '-d') or 
       (sys.argv[3] != '-f' and sys.argv[3] != '-d')):
        fancyExit("Incorrect Flags", 3)
    
    # makes sure flags match with proper input
    if   (sys.argv[1] == '-f'):
        verifyPathToFile(sys.argv[2])
    elif (sys.argv[1] == '-d'):
        verifyPathToDir(sys.argv[2])

    if   (sys.argv[3] == '-f'):
        verifyPathToFile(sys.argv[4])
    elif (sys.argv[3] == '-d'):
        verifyPathToDir(sys.argv[4])

# Create lists of filepaths of inputs
def parseArgs():

    # hold names of all filepaths to be compared
    fpaths1 = getPaths(sys.argv[1], sys.argv[2])
    fpaths2 = getPaths(sys.argv[3], sys.argv[4])

    return fpaths1, fpaths2

# Obtains filepaths from the locations specificed in the input
def getPaths(flag, path):

    fpaths = list()

    if (flag == '-f'):
        fpaths.append(path)
    else:
        # obtains list of all the short names of files in directory
        for (dirpath, dirnames, filenames) in os.walk(path):
            fnames = filenames
            fpaths = [os.path.join(path, name) for name in fnames]
            # if there is a subdirectory in the target directory, print 
            # an error and continue execution with any actual files found
            if dirnames:
                printError("At least one subdirectory detected in " + path + \
                ". Files in subdirectories are not matched.", 12)
            break
            
    return fpaths
    
# Makes sure that the directory in tmp exists, create it otherwise
def verifyTmp():

    if not os.path.exists(TMP_FOLDER):
        os.mkdir(TMP_FOLDER)

# Clean the tmp directory by removing any tmp files in our tmp folder
def cleanTmp():

    shutil.rmtree(TMP_FOLDER)

# Make sure the input is a real file
def verifyPathToFile(path):

    if not os.path.isfile(path):
        fancyExit("Path " + path + " is invalid/is not a file", 2)

# Make sure the input is a real directory
def verifyPathToDir(path):

    if not os.path.isdir(path):
        fancyExit("Path " + path + "is invalid/is not a Directory", 2)

# Gets the format of the file based on size of sample and sample width
#  8 bits: size + "b"
# 16 bits: size + "h"
def getFormat(sampsize, sampwidth):

    fmt = str(sampsize)
    if sampwidth == 1:
        fmt = fmt + 'b'
    else:
        fmt = fmt + 'h'
    return fmt

# Compares the two fingerprints to determine if there is a match
# fprint1 and fprint2 are arrays of tuples of significant freqs defined in
# createFingerprints
def compare(fprint1, fprint2):

    # if both inputs are blank they are a match 
    if len(fprint1) == 0  and len(fprint2) == 0:
        return True
    # if one input is blank they do not match
    elif len(fprint1) == 0 or len(fprint2) == 0:
        return False
    #else, check the large against the smaller
    elif len(fprint1) <= len(fprint2):
        return isSubset(fprint1, fprint2)
    else:
        return isSubset(fprint2, fprint1)

# Checks to see if the smaller file is contained in the larger
# Called by compare
# assumes list1 is the child/subset
def isSubset(list1, list2):

    count = 0
    val1 = list1[0]
    
    # loops through the larger list
    # compares it with the smaller list
    for i2, val2 in enumerate(list2):

        # check if there are enough pieces for it to be a match
        if len(list1) > len(list2) - i2:
            break

        #if distance(val1, val2) <= TOLERANCE:
        count = checkSequence(list1, list2, i2) + 1
        if closeRatio(count, len(list1)):
            return True

    return False

# Checks if list1 is close to list2 starting from ind 
def checkSequence(list1, list2, ind):

    count = 0
    
    # i is the index for list 1, it starts from 0 to len(list1)
    # j is the index for list 2, it starts from ind to len(list1)+ind 
    for i, j in enumerate(range(ind, len(list1)+ind)):
        if distance(list1[i], list2[j]) <= TOLERANCE:
            count = count + 1

    return count

# Uses euclidean formula to get the distance between the two given tuples
# assumes tuple1 and tuple2 are of the same size
def distance(tuple1, tuple2):

    underroot = 0

    for i in range(0, len(tuple1)): 
        underroot = underroot + math.pow(tuple1[i] - tuple2[i], 2)
    
    dist = math.sqrt(underroot)

    return dist

# Creates tolerance for acceptance as a derived file PERCENT_RATIO
def closeRatio(val1,val2):

    val1 = float(val1)
    val2 = float(val2)
    ratio = 1.0

    if val1 > val2:
        ratio = val2/val1
    else:
        ratio = val1/val2

    return not ratio < PERCENT_RATIO

# Prints an error to standard error, but does not terminate yet.
# instead it changes the global variable for exit code.
def printError(message, code):

    if message != "":
        sys.stderr.write("ERROR: " + message + "\n")

    EXIT_CODE = code

# Custom Exit method
# deletes tmp folder before exiting
def fancyExit(message, code):

    if message != "":
        sys.stderr.write("ERROR: " + message + "\n")

    cleanTmp()
    exit(code)

# Main
if __name__ == '__main__':

    # Verify all input
    verifyTmp()
    verifyArgs()

    # Sends lists of filepaths to parseArgs
    fpaths1, fpaths2 = parseArgs()
    
    # Determines matches between fpaths
    allMatch(fpaths1, fpaths2)
    
    # Exits
    fancyExit("", EXIT_CODE)
